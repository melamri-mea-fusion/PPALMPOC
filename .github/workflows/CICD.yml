name: CI + CD

on:
  pull_request:
    branches: [ main ]
    
jobs:
  get-env-vars-uat:
    name: Get Environment vars for UAT
    runs-on: windows-latest
    environment: UAT
    outputs:
      SHAREPOINT_SOURCE_SITE: ${{vars.SHAREPOINT_SOURCE_SITE}}
      SHAREPOINT_TARGET_SITE: ${{vars.SHAREPOINT_TARGET_SITE}}
    steps:
      - run: echo "get env vars for UAT ...."
      
  get-env-vars-prod:
    needs: DeployUAT
    name: Get Environment vars for PROD
    runs-on: windows-latest
    environment: PROD
    outputs:
      SHAREPOINT_SOURCE_SITE: ${{vars.SHAREPOINT_SOURCE_SITE}}
      SHAREPOINT_TARGET_SITE: ${{vars.SHAREPOINT_TARGET_SITE}}
    steps:
      - run: echo "get env vars for PROD ...."
  
  auto-approve-job:
    name: Auto approve job
    needs: get-env-vars-prod
    runs-on: windows-latest
    steps:
    - name: Get Environment Id
      id: environment-id
      shell: pwsh
      run: |
        $environmentId = ""
        $url = "https://api.github.com/repos/${{ github.repository }}/environments"
        $response = Invoke-RestMethod -Uri $url -Method Get -Headers @"{
          Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"
        }"@;
        if ($response){
          # Find Environment Id...
          foreach ($environment in $response.environments) {
            if ($environment.name -eq "PROD"){
              $environmentId = $environment.id
              break
            }
          }
        }

        # Set output
        echo "::set-output name=value::$(echo $environmentId)"

    - name: Show me Environment Id
      run: |
        echo "Environment Id for Prod is ${{ steps.environment-id.outputs.value }}"
    - name: Auto approve
      shell: pwsh
      run: |        
        $url = "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/pending_deployments";
        $body = @"
        { "environment_ids": [ steps.environment-id.outputs.value ],
          "state": "approved",
          "comment": "Auto-approved for automation"
        }
        "@;
        Invoke-RESTMethod -Uri $url -Method POST -Headers  @"{
          Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"
        }"@ -Body $body -ContentType "application/json"; 

  DeployUAT:
    needs: [get-env-vars-uat]
    name: Deploy to UAT 
    uses: ./.github/workflows/MigrateSPLists.yml
    with:
      ENVIRONMENT: UAT
      SHAREPOINT_SOURCE_SITE: ${{  needs.get-env-vars-uat.outputs.SHAREPOINT_SOURCE_SITE }}
      SHAREPOINT_TARGET_SITE: ${{  needs.get-env-vars-uat.outputs.SHAREPOINT_TARGET_SITE }}
    secrets: 
      MEAFUSION_PFX_PASSWORD: ${{ secrets.MEAFUSION_PFX_PASSWORD }}
      MEAFUSION_PFX : ${{ secrets.MEAFUSION_PFX }}
      
  DeployProd:
    needs: [get-env-vars-prod]
    name: Deploy to PROD 
    uses: ./.github/workflows/MigrateSPLists.yml
    with:
      ENVIRONMENT: PROD
      SHAREPOINT_SOURCE_SITE: ${{  needs.get-env-vars-prod.outputs.SHAREPOINT_SOURCE_SITE }}
      SHAREPOINT_TARGET_SITE: ${{  needs.get-env-vars-prod.outputs.SHAREPOINT_TARGET_SITE }}
    secrets: 
      MEAFUSION_PFX_PASSWORD: ${{ secrets.MEAFUSION_PFX_PASSWORD }}
      MEAFUSION_PFX : ${{ secrets.MEAFUSION_PFX }}
